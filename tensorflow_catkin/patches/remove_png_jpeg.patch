diff --git a/tensorflow/contrib/cmake/CMakeLists.txt b/tensorflow/contrib/cmake/CMakeLists.txt
index ab994ea..f23977e 100644
--- a/tensorflow/contrib/cmake/CMakeLists.txt
+++ b/tensorflow/contrib/cmake/CMakeLists.txt
@@ -210,8 +210,8 @@ endif()
 # External dependencies
 include(zlib)
 include(gif)
-include(png)
-include(jpeg)
+#include(png)
+#include(jpeg)
 include(lmdb)
 include(eigen)
 include(gemmlowp)
@@ -234,8 +234,8 @@ link_directories(${ADD_LINK_DIRECTORY})
 
 set(tensorflow_EXTERNAL_LIBRARIES
     ${gif_STATIC_LIBRARIES}
-    ${png_STATIC_LIBRARIES}
-    ${jpeg_STATIC_LIBRARIES}
+    #${png_STATIC_LIBRARIES}
+    #${jpeg_STATIC_LIBRARIES}
     ${lmdb_STATIC_LIBRARIES}
     ${jsoncpp_STATIC_LIBRARIES}
     ${farmhash_STATIC_LIBRARIES}
@@ -259,8 +259,8 @@ endif (systemlib_ZLIB)
 set(tensorflow_EXTERNAL_DEPENDENCIES
     zlib_copy_headers_to_destination
     gif_copy_headers_to_destination
-    png_copy_headers_to_destination
-    jpeg_copy_headers_to_destination
+    #png_copy_headers_to_destination
+    #jpeg_copy_headers_to_destination
     lmdb_copy_headers_to_destination
     jsoncpp
     farmhash_copy_headers_to_destination
@@ -283,8 +283,8 @@ include_directories(
     # External dependencies.
     ${zlib_INCLUDE_DIR}
     ${gif_INCLUDE_DIR}
-    ${png_INCLUDE_DIR}
-    ${jpeg_INCLUDE_DIR}
+    #${png_INCLUDE_DIR}
+    #${jpeg_INCLUDE_DIR}
     ${lmdb_INCLUDE_DIR}
     ${eigen_INCLUDE_DIRS}
     ${gemmlowp_INCLUDE_DIR}
diff --git a/tensorflow/contrib/cmake/tf_core_framework.cmake b/tensorflow/contrib/cmake/tf_core_framework.cmake
index 7ae6f17..ddd6830 100644
--- a/tensorflow/contrib/cmake/tf_core_framework.cmake
+++ b/tensorflow/contrib/cmake/tf_core_framework.cmake
@@ -196,6 +196,15 @@ file(GLOB_RECURSE tf_core_lib_srcs
     "${tensorflow_source_dir}/tensorflow/core/public/*.h"
 )
 
+# Exclude libpng and libjpeg libraries
+file(GLOB tf_core_lib_srcs_exclude
+    "${tensorflow_source_dir}/tensorflow/core/lib/jpeg/*.h"
+    "${tensorflow_source_dir}/tensorflow/core/lib/jpeg/*.cc"
+    "${tensorflow_source_dir}/tensorflow/core/lib/png/*.h"
+    "${tensorflow_source_dir}/tensorflow/core/lib/png/*.cc"
+)
+list(REMOVE_ITEM tf_core_lib_srcs ${tf_core_lib_srcs_exclude})
+
 file(GLOB tf_core_platform_srcs
     "${tensorflow_source_dir}/tensorflow/core/platform/*.h"
     "${tensorflow_source_dir}/tensorflow/core/platform/*.cc"
diff --git a/tensorflow/contrib/cmake/tf_core_kernels.cmake b/tensorflow/contrib/cmake/tf_core_kernels.cmake
index 502c12b..2782eb7 100644
--- a/tensorflow/contrib/cmake/tf_core_kernels.cmake
+++ b/tensorflow/contrib/cmake/tf_core_kernels.cmake
@@ -155,6 +155,12 @@ file(GLOB_RECURSE tf_core_kernels_exclude_srcs
    "${tensorflow_source_dir}/tensorflow/core/kernels/fuzzing/*"
    "${tensorflow_source_dir}/tensorflow/core/kernels/hexagon/*"
    "${tensorflow_source_dir}/tensorflow/core/kernels/remote_fused_graph_rewriter_transform*.cc"
+   # Exclude kernels depending on libpng and libjpeg
+   "${tensorflow_source_dir}/tensorflow/core/kernels/encode_png_op.cc"
+   "${tensorflow_source_dir}/tensorflow/core/kernels/encode_jpeg_op.cc"
+   "${tensorflow_source_dir}/tensorflow/core/kernels/decode_image_op.cc"
+   "${tensorflow_source_dir}/tensorflow/core/kernels/summary_image_op.cc"
+   "${tensorflow_source_dir}/tensorflow/core/kernels/extract_jpeg_shape_op.cc"
 )
 list(REMOVE_ITEM tf_core_kernels_srcs ${tf_core_kernels_exclude_srcs})
 
diff --git a/tensorflow/contrib/tensorboard/db/summary_converter.cc b/tensorflow/contrib/tensorboard/db/summary_converter.cc
index 93c1183..47b7b78 100644
--- a/tensorflow/contrib/tensorboard/db/summary_converter.cc
+++ b/tensorflow/contrib/tensorboard/db/summary_converter.cc
@@ -20,7 +20,7 @@ limitations under the License.
 #include "tensorflow/core/framework/types.pb.h"
 #include "tensorflow/core/lib/histogram/histogram.h"
 #include "tensorflow/core/lib/io/path.h"
-#include "tensorflow/core/lib/png/png_io.h"
+//#include "tensorflow/core/lib/png/png_io.h"
 #include "tensorflow/core/lib/wav/wav_io.h"
 
 namespace tensorflow {
@@ -95,11 +95,11 @@ Status AddImages(const string& tag, int max_images, int batch_size, int w,
     si->set_colorspace(depth);
     const int channel_bits = 8;
     const int compression = -1;  // Use zlib default
-    if (!png::WriteImageToBuffer(image.data(), w, h, w * depth, depth,
-                                 channel_bits, compression,
-                                 si->mutable_encoded_image_string(), nullptr)) {
+    //if (!png::WriteImageToBuffer(image.data(), w, h, w * depth, depth,
+                                 //channel_bits, compression,
+                                 //si->mutable_encoded_image_string(), nullptr)) {
       return errors::Internal("PNG encoding failed");
-    }
+    //}
   }
   return Status::OK();
 }
